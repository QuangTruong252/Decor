/* tslint:disable */
/* eslint-disable */
/**
 * Nail API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import globalAxios, {
    type AxiosInstance,
    type AxiosRequestConfig,
    type InternalAxiosRequestConfig,
    type RawAxiosRequestConfig,
} from 'axios';

export const BASE_PATH = 'http://localhost:5000'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\t',
    pipes: '|',
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(
        configuration?: Configuration,
        protected basePath: string = BASE_PATH,
        protected axios: AxiosInstance = globalAxios,
    ) {
        if (this.configuration) {
            this.configuration = this.configuration;
            this.basePath = this.configuration.basePath ?? this.basePath;
        }

        this.axios.interceptors.request.use(this.injectToken, (error) => Promise.reject(error));
    }

    injectToken = (config: InternalAxiosRequestConfig): InternalAxiosRequestConfig => {
        try {
            const token = localStorage.getItem('token');
            if (token != null) {
                config.headers!.Authorization = `Bearer ${token}`;
            }
            return config;
        } catch (error) {
            throw new Error(error as string);
        }
    };

    public async get<T>(url: string, config?: AxiosRequestConfig) {
        try {
            const response = await this.axios.get(this.basePath + '/api/' + url, config);
            return response;
        } catch (error) {
            console.log('error: ', error);
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(
        public field: string,
        msg?: string,
    ) {
        super(msg);
        this.name = 'RequiredError';
    }
}

interface ServerMap {
    [key: string]: {
        url: string;
        description: string;
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {};
