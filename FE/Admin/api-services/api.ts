/* tslint:disable */
/* eslint-disable */
/**
 * DecorStore API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthResponseDTO
 */
export interface AuthResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof AuthResponseDTO
     */
    'token'?: string | null;
    /**
     * 
     * @type {UserDTO}
     * @memberof AuthResponseDTO
     */
    'user'?: UserDTO;
}
/**
 * 
 * @export
 * @interface Banner
 */
export interface Banner {
    /**
     * 
     * @type {number}
     * @memberof Banner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'link'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Banner
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Banner
     */
    'displayOrder'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Banner
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface BannerDTO
 */
export interface BannerDTO {
    /**
     * 
     * @type {number}
     * @memberof BannerDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BannerDTO
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerDTO
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerDTO
     */
    'link'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BannerDTO
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BannerDTO
     */
    'displayOrder'?: number;
    /**
     * 
     * @type {string}
     * @memberof BannerDTO
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'parentId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Category
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Category}
     * @memberof Category
     */
    'parentCategory'?: Category;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Category
     */
    'subcategories'?: Array<Category> | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof Category
     */
    'products'?: Array<Product> | null;
}
/**
 * 
 * @export
 * @interface CategoryDTO
 */
export interface CategoryDTO {
    /**
     * 
     * @type {number}
     * @memberof CategoryDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryDTO
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CategoryDTO
     */
    'parentId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryDTO
     */
    'parentName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryDTO
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<CategoryDTO>}
     * @memberof CategoryDTO
     */
    'subcategories'?: Array<CategoryDTO> | null;
}
/**
 * 
 * @export
 * @interface CreateOrderDTO
 */
export interface CreateOrderDTO {
    /**
     * 
     * @type {number}
     * @memberof CreateOrderDTO
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDTO
     */
    'paymentMethod': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderDTO
     */
    'shippingAddress': string;
    /**
     * 
     * @type {Array<CreateOrderItemDTO>}
     * @memberof CreateOrderDTO
     */
    'orderItems': Array<CreateOrderItemDTO>;
}
/**
 * 
 * @export
 * @interface CreateOrderItemDTO
 */
export interface CreateOrderItemDTO {
    /**
     * 
     * @type {number}
     * @memberof CreateOrderItemDTO
     */
    'productId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrderItemDTO
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface CreateReviewDTO
 */
export interface CreateReviewDTO {
    /**
     * 
     * @type {number}
     * @memberof CreateReviewDTO
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateReviewDTO
     */
    'productId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateReviewDTO
     */
    'rating': number;
    /**
     * 
     * @type {string}
     * @memberof CreateReviewDTO
     */
    'comment'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginDTO
 */
export interface LoginDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'totalAmount': number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'orderStatus': string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'paymentMethod': string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'shippingAddress': string;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {User}
     * @memberof Order
     */
    'user'?: User;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    'orderItems'?: Array<OrderItem> | null;
}
/**
 * 
 * @export
 * @interface OrderDTO
 */
export interface OrderDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'userFullName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'totalAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'orderStatus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'paymentMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'shippingAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'orderDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<OrderItemDTO>}
     * @memberof OrderDTO
     */
    'orderItems'?: Array<OrderItemDTO> | null;
}
/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'orderId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'productId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'unitPrice': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItem
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {Order}
     * @memberof OrderItem
     */
    'order'?: Order;
    /**
     * 
     * @type {Product}
     * @memberof OrderItem
     */
    'product'?: Product;
}
/**
 * 
 * @export
 * @interface OrderItemDTO
 */
export interface OrderItemDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'orderId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'productId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'productName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'productImageUrl'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'subtotal'?: number;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'originalPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'stockQuantity': number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'sku': string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'categoryId'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'isFeatured'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'averageRating'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Category}
     * @memberof Product
     */
    'category'?: Category;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'images'?: Array<string> | null;
    /**
     * 
     * @type {Array<Review>}
     * @memberof Product
     */
    'reviews'?: Array<Review> | null;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Product
     */
    'orderItems'?: Array<OrderItem> | null;
}
/**
 * 
 * @export
 * @interface ProductDTO
 */
export interface ProductDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'originalPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'stockQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'sku'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'categoryId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'categoryName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductDTO
     */
    'isFeatured'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductDTO
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'averageRating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductDTO
     */
    'images'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface RegisterDTO
 */
export interface RegisterDTO {
    /**
     * 
     * @type {string}
     * @memberof RegisterDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDTO
     */
    'confirmPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'productId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'rating': number;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'comment'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Review
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'createdAt'?: string;
    /**
     * 
     * @type {User}
     * @memberof Review
     */
    'user'?: User;
    /**
     * 
     * @type {Product}
     * @memberof Review
     */
    'product'?: Product;
}
/**
 * 
 * @export
 * @interface ReviewDTO
 */
export interface ReviewDTO {
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewDTO
     */
    'userName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    'productId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewDTO
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewDTO
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReviewDTO
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface UpdateOrderStatusDTO
 */
export interface UpdateOrderStatusDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderStatusDTO
     */
    'orderStatus': string;
}
/**
 * 
 * @export
 * @interface UpdateReviewDTO
 */
export interface UpdateReviewDTO {
    /**
     * 
     * @type {number}
     * @memberof UpdateReviewDTO
     */
    'rating': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateReviewDTO
     */
    'comment'?: string | null;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'role': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<Order>}
     * @memberof User
     */
    'orders'?: Array<Order> | null;
    /**
     * 
     * @type {Array<Review>}
     * @memberof User
     */
    'reviews'?: Array<Review> | null;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'role'?: string | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginDTO} [loginDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginDTO?: LoginDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDTO} [registerDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (registerDTO?: RegisterDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginDTO} [loginDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginDTO?: LoginDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterDTO} [registerDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(registerDTO?: RegisterDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(registerDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthApiApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(requestParameters: AuthApiApiAuthLoginPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponseDTO> {
            return localVarFp.apiAuthLoginPost(requestParameters.loginDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiApiAuthRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(requestParameters: AuthApiApiAuthRegisterPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponseDTO> {
            return localVarFp.apiAuthRegisterPost(requestParameters.registerDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthUserGet(options?: RawAxiosRequestConfig): AxiosPromise<UserDTO> {
            return localVarFp.apiAuthUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAuthLoginPost operation in AuthApi.
 * @export
 * @interface AuthApiApiAuthLoginPostRequest
 */
export interface AuthApiApiAuthLoginPostRequest {
    /**
     * 
     * @type {LoginDTO}
     * @memberof AuthApiApiAuthLoginPost
     */
    readonly loginDTO?: LoginDTO
}

/**
 * Request parameters for apiAuthRegisterPost operation in AuthApi.
 * @export
 * @interface AuthApiApiAuthRegisterPostRequest
 */
export interface AuthApiApiAuthRegisterPostRequest {
    /**
     * 
     * @type {RegisterDTO}
     * @memberof AuthApiApiAuthRegisterPost
     */
    readonly registerDTO?: RegisterDTO
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthApiApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(requestParameters: AuthApiApiAuthLoginPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(requestParameters.loginDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiAuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(requestParameters: AuthApiApiAuthRegisterPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(requestParameters.registerDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthUserGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BannerApi - axios parameter creator
 * @export
 */
export const BannerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerActiveGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Banner/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Banner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBannerIdDelete', 'id', id)
            const localVarPath = `/api/Banner/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBannerIdGet', 'id', id)
            const localVarPath = `/api/Banner/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} title 
         * @param {File} [imageFile] 
         * @param {string} [link] 
         * @param {boolean} [isActive] 
         * @param {number} [displayOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerIdPut: async (id: number, title: string, imageFile?: File, link?: string, isActive?: boolean, displayOrder?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiBannerIdPut', 'id', id)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('apiBannerIdPut', 'title', title)
            const localVarPath = `/api/Banner/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }
    
            if (imageFile !== undefined) { 
                localVarFormParams.append('ImageFile', imageFile as any);
            }
    
            if (link !== undefined) { 
                localVarFormParams.append('Link', link as any);
            }
    
            if (isActive !== undefined) { 
                localVarFormParams.append('IsActive', String(isActive) as any);
            }
    
            if (displayOrder !== undefined) { 
                localVarFormParams.append('DisplayOrder', displayOrder as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} title 
         * @param {File} imageFile 
         * @param {string} [link] 
         * @param {boolean} [isActive] 
         * @param {number} [displayOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerPost: async (title: string, imageFile: File, link?: string, isActive?: boolean, displayOrder?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('apiBannerPost', 'title', title)
            // verify required parameter 'imageFile' is not null or undefined
            assertParamExists('apiBannerPost', 'imageFile', imageFile)
            const localVarPath = `/api/Banner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }
    
            if (imageFile !== undefined) { 
                localVarFormParams.append('ImageFile', imageFile as any);
            }
    
            if (link !== undefined) { 
                localVarFormParams.append('Link', link as any);
            }
    
            if (isActive !== undefined) { 
                localVarFormParams.append('IsActive', String(isActive) as any);
            }
    
            if (displayOrder !== undefined) { 
                localVarFormParams.append('DisplayOrder', displayOrder as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BannerApi - functional programming interface
 * @export
 */
export const BannerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BannerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerActiveGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BannerDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerActiveGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BannerApi.apiBannerActiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BannerDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BannerApi.apiBannerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BannerApi.apiBannerIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BannerDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BannerApi.apiBannerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} title 
         * @param {File} [imageFile] 
         * @param {string} [link] 
         * @param {boolean} [isActive] 
         * @param {number} [displayOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerIdPut(id: number, title: string, imageFile?: File, link?: string, isActive?: boolean, displayOrder?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerIdPut(id, title, imageFile, link, isActive, displayOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BannerApi.apiBannerIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} title 
         * @param {File} imageFile 
         * @param {string} [link] 
         * @param {boolean} [isActive] 
         * @param {number} [displayOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBannerPost(title: string, imageFile: File, link?: string, isActive?: boolean, displayOrder?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Banner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBannerPost(title, imageFile, link, isActive, displayOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BannerApi.apiBannerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BannerApi - factory interface
 * @export
 */
export const BannerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BannerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerActiveGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BannerDTO>> {
            return localVarFp.apiBannerActiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<BannerDTO>> {
            return localVarFp.apiBannerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BannerApiApiBannerIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerIdDelete(requestParameters: BannerApiApiBannerIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBannerIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BannerApiApiBannerIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerIdGet(requestParameters: BannerApiApiBannerIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BannerDTO> {
            return localVarFp.apiBannerIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BannerApiApiBannerIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerIdPut(requestParameters: BannerApiApiBannerIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiBannerIdPut(requestParameters.id, requestParameters.title, requestParameters.imageFile, requestParameters.link, requestParameters.isActive, requestParameters.displayOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BannerApiApiBannerPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBannerPost(requestParameters: BannerApiApiBannerPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Banner> {
            return localVarFp.apiBannerPost(requestParameters.title, requestParameters.imageFile, requestParameters.link, requestParameters.isActive, requestParameters.displayOrder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiBannerIdDelete operation in BannerApi.
 * @export
 * @interface BannerApiApiBannerIdDeleteRequest
 */
export interface BannerApiApiBannerIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof BannerApiApiBannerIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiBannerIdGet operation in BannerApi.
 * @export
 * @interface BannerApiApiBannerIdGetRequest
 */
export interface BannerApiApiBannerIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BannerApiApiBannerIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiBannerIdPut operation in BannerApi.
 * @export
 * @interface BannerApiApiBannerIdPutRequest
 */
export interface BannerApiApiBannerIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof BannerApiApiBannerIdPut
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof BannerApiApiBannerIdPut
     */
    readonly title: string

    /**
     * 
     * @type {File}
     * @memberof BannerApiApiBannerIdPut
     */
    readonly imageFile?: File

    /**
     * 
     * @type {string}
     * @memberof BannerApiApiBannerIdPut
     */
    readonly link?: string

    /**
     * 
     * @type {boolean}
     * @memberof BannerApiApiBannerIdPut
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {number}
     * @memberof BannerApiApiBannerIdPut
     */
    readonly displayOrder?: number
}

/**
 * Request parameters for apiBannerPost operation in BannerApi.
 * @export
 * @interface BannerApiApiBannerPostRequest
 */
export interface BannerApiApiBannerPostRequest {
    /**
     * 
     * @type {string}
     * @memberof BannerApiApiBannerPost
     */
    readonly title: string

    /**
     * 
     * @type {File}
     * @memberof BannerApiApiBannerPost
     */
    readonly imageFile: File

    /**
     * 
     * @type {string}
     * @memberof BannerApiApiBannerPost
     */
    readonly link?: string

    /**
     * 
     * @type {boolean}
     * @memberof BannerApiApiBannerPost
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {number}
     * @memberof BannerApiApiBannerPost
     */
    readonly displayOrder?: number
}

/**
 * BannerApi - object-oriented interface
 * @export
 * @class BannerApi
 * @extends {BaseAPI}
 */
export class BannerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerActiveGet(options?: RawAxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerActiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerGet(options?: RawAxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BannerApiApiBannerIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerIdDelete(requestParameters: BannerApiApiBannerIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BannerApiApiBannerIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerIdGet(requestParameters: BannerApiApiBannerIdGetRequest, options?: RawAxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BannerApiApiBannerIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerIdPut(requestParameters: BannerApiApiBannerIdPutRequest, options?: RawAxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerIdPut(requestParameters.id, requestParameters.title, requestParameters.imageFile, requestParameters.link, requestParameters.isActive, requestParameters.displayOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BannerApiApiBannerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public apiBannerPost(requestParameters: BannerApiApiBannerPostRequest, options?: RawAxiosRequestConfig) {
        return BannerApiFp(this.configuration).apiBannerPost(requestParameters.title, requestParameters.imageFile, requestParameters.link, requestParameters.isActive, requestParameters.displayOrder, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryHierarchicalGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Category/hierarchical`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCategoryIdDelete', 'id', id)
            const localVarPath = `/api/Category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCategoryIdGet', 'id', id)
            const localVarPath = `/api/Category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} name 
         * @param {string} [slug] 
         * @param {string} [description] 
         * @param {number} [parentId] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdPut: async (id: number, name: string, slug?: string, description?: string, parentId?: number, imageFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCategoryIdPut', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiCategoryIdPut', 'name', name)
            const localVarPath = `/api/Category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (slug !== undefined) { 
                localVarFormParams.append('Slug', slug as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (parentId !== undefined) { 
                localVarFormParams.append('ParentId', parentId as any);
            }
    
            if (imageFile !== undefined) { 
                localVarFormParams.append('ImageFile', imageFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} slug 
         * @param {string} [description] 
         * @param {number} [parentId] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryPost: async (name: string, slug: string, description?: string, parentId?: number, imageFile?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiCategoryPost', 'name', name)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiCategoryPost', 'slug', slug)
            const localVarPath = `/api/Category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (slug !== undefined) { 
                localVarFormParams.append('Slug', slug as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (parentId !== undefined) { 
                localVarFormParams.append('ParentId', parentId as any);
            }
    
            if (imageFile !== undefined) { 
                localVarFormParams.append('ImageFile', imageFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategorySlugSlugGet: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiCategorySlugSlugGet', 'slug', slug)
            const localVarPath = `/api/Category/slug/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryHierarchicalGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryHierarchicalGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryHierarchicalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} name 
         * @param {string} [slug] 
         * @param {string} [description] 
         * @param {number} [parentId] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryIdPut(id: number, name: string, slug?: string, description?: string, parentId?: number, imageFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryIdPut(id, name, slug, description, parentId, imageFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {string} slug 
         * @param {string} [description] 
         * @param {number} [parentId] 
         * @param {File} [imageFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryPost(name: string, slug: string, description?: string, parentId?: number, imageFile?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryPost(name, slug, description, parentId, imageFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategorySlugSlugGet(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategorySlugSlugGet(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategorySlugSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<CategoryDTO>> {
            return localVarFp.apiCategoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryHierarchicalGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<CategoryDTO>> {
            return localVarFp.apiCategoryHierarchicalGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiApiCategoryIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdDelete(requestParameters: CategoryApiApiCategoryIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCategoryIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiApiCategoryIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdGet(requestParameters: CategoryApiApiCategoryIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryDTO> {
            return localVarFp.apiCategoryIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiApiCategoryIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdPut(requestParameters: CategoryApiApiCategoryIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCategoryIdPut(requestParameters.id, requestParameters.name, requestParameters.slug, requestParameters.description, requestParameters.parentId, requestParameters.imageFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiApiCategoryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryPost(requestParameters: CategoryApiApiCategoryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.apiCategoryPost(requestParameters.name, requestParameters.slug, requestParameters.description, requestParameters.parentId, requestParameters.imageFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiApiCategorySlugSlugGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategorySlugSlugGet(requestParameters: CategoryApiApiCategorySlugSlugGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryDTO> {
            return localVarFp.apiCategorySlugSlugGet(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiCategoryIdDelete operation in CategoryApi.
 * @export
 * @interface CategoryApiApiCategoryIdDeleteRequest
 */
export interface CategoryApiApiCategoryIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiApiCategoryIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiCategoryIdGet operation in CategoryApi.
 * @export
 * @interface CategoryApiApiCategoryIdGetRequest
 */
export interface CategoryApiApiCategoryIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiApiCategoryIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiCategoryIdPut operation in CategoryApi.
 * @export
 * @interface CategoryApiApiCategoryIdPutRequest
 */
export interface CategoryApiApiCategoryIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiApiCategoryIdPut
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof CategoryApiApiCategoryIdPut
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof CategoryApiApiCategoryIdPut
     */
    readonly slug?: string

    /**
     * 
     * @type {string}
     * @memberof CategoryApiApiCategoryIdPut
     */
    readonly description?: string

    /**
     * 
     * @type {number}
     * @memberof CategoryApiApiCategoryIdPut
     */
    readonly parentId?: number

    /**
     * 
     * @type {File}
     * @memberof CategoryApiApiCategoryIdPut
     */
    readonly imageFile?: File
}

/**
 * Request parameters for apiCategoryPost operation in CategoryApi.
 * @export
 * @interface CategoryApiApiCategoryPostRequest
 */
export interface CategoryApiApiCategoryPostRequest {
    /**
     * 
     * @type {string}
     * @memberof CategoryApiApiCategoryPost
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof CategoryApiApiCategoryPost
     */
    readonly slug: string

    /**
     * 
     * @type {string}
     * @memberof CategoryApiApiCategoryPost
     */
    readonly description?: string

    /**
     * 
     * @type {number}
     * @memberof CategoryApiApiCategoryPost
     */
    readonly parentId?: number

    /**
     * 
     * @type {File}
     * @memberof CategoryApiApiCategoryPost
     */
    readonly imageFile?: File
}

/**
 * Request parameters for apiCategorySlugSlugGet operation in CategoryApi.
 * @export
 * @interface CategoryApiApiCategorySlugSlugGetRequest
 */
export interface CategoryApiApiCategorySlugSlugGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CategoryApiApiCategorySlugSlugGet
     */
    readonly slug: string
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryGet(options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryHierarchicalGet(options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryHierarchicalGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiApiCategoryIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryIdDelete(requestParameters: CategoryApiApiCategoryIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiApiCategoryIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryIdGet(requestParameters: CategoryApiApiCategoryIdGetRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiApiCategoryIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryIdPut(requestParameters: CategoryApiApiCategoryIdPutRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryIdPut(requestParameters.id, requestParameters.name, requestParameters.slug, requestParameters.description, requestParameters.parentId, requestParameters.imageFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiApiCategoryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryPost(requestParameters: CategoryApiApiCategoryPostRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryPost(requestParameters.name, requestParameters.slug, requestParameters.description, requestParameters.parentId, requestParameters.imageFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiApiCategorySlugSlugGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategorySlugSlugGet(requestParameters: CategoryApiApiCategorySlugSlugGetRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategorySlugSlugGet(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHealthCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/HealthCheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHealthCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHealthCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthCheckApi.apiHealthCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHealthCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiHealthCheckGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public apiHealthCheckGet(options?: RawAxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).apiHealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiOrderIdDelete', 'id', id)
            const localVarPath = `/api/Order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiOrderIdGet', 'id', id)
            const localVarPath = `/api/Order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateOrderStatusDTO} [updateOrderStatusDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderIdStatusPut: async (id: number, updateOrderStatusDTO?: UpdateOrderStatusDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiOrderIdStatusPut', 'id', id)
            const localVarPath = `/api/Order/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderStatusDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrderDTO} [createOrderDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPost: async (createOrderDTO?: CreateOrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderUserUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiOrderUserUserIdGet', 'userId', userId)
            const localVarPath = `/api/Order/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateOrderStatusDTO} [updateOrderStatusDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderIdStatusPut(id: number, updateOrderStatusDTO?: UpdateOrderStatusDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderIdStatusPut(id, updateOrderStatusDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderIdStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateOrderDTO} [createOrderDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderPost(createOrderDTO?: CreateOrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderPost(createOrderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderUserUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderUserUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.apiOrderUserUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderDTO>> {
            return localVarFp.apiOrderGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderApiApiOrderIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderIdDelete(requestParameters: OrderApiApiOrderIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiOrderIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderApiApiOrderIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderIdGet(requestParameters: OrderApiApiOrderIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderDTO> {
            return localVarFp.apiOrderIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderApiApiOrderIdStatusPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderIdStatusPut(requestParameters: OrderApiApiOrderIdStatusPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiOrderIdStatusPut(requestParameters.id, requestParameters.updateOrderStatusDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderApiApiOrderPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPost(requestParameters: OrderApiApiOrderPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.apiOrderPost(requestParameters.createOrderDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrderApiApiOrderUserUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderUserUserIdGet(requestParameters: OrderApiApiOrderUserUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderDTO>> {
            return localVarFp.apiOrderUserUserIdGet(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiOrderIdDelete operation in OrderApi.
 * @export
 * @interface OrderApiApiOrderIdDeleteRequest
 */
export interface OrderApiApiOrderIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderApiApiOrderIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiOrderIdGet operation in OrderApi.
 * @export
 * @interface OrderApiApiOrderIdGetRequest
 */
export interface OrderApiApiOrderIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderApiApiOrderIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiOrderIdStatusPut operation in OrderApi.
 * @export
 * @interface OrderApiApiOrderIdStatusPutRequest
 */
export interface OrderApiApiOrderIdStatusPutRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderApiApiOrderIdStatusPut
     */
    readonly id: number

    /**
     * 
     * @type {UpdateOrderStatusDTO}
     * @memberof OrderApiApiOrderIdStatusPut
     */
    readonly updateOrderStatusDTO?: UpdateOrderStatusDTO
}

/**
 * Request parameters for apiOrderPost operation in OrderApi.
 * @export
 * @interface OrderApiApiOrderPostRequest
 */
export interface OrderApiApiOrderPostRequest {
    /**
     * 
     * @type {CreateOrderDTO}
     * @memberof OrderApiApiOrderPost
     */
    readonly createOrderDTO?: CreateOrderDTO
}

/**
 * Request parameters for apiOrderUserUserIdGet operation in OrderApi.
 * @export
 * @interface OrderApiApiOrderUserUserIdGetRequest
 */
export interface OrderApiApiOrderUserUserIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof OrderApiApiOrderUserUserIdGet
     */
    readonly userId: number
}

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderGet(options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderApiApiOrderIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderIdDelete(requestParameters: OrderApiApiOrderIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderApiApiOrderIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderIdGet(requestParameters: OrderApiApiOrderIdGetRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderApiApiOrderIdStatusPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderIdStatusPut(requestParameters: OrderApiApiOrderIdStatusPutRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderIdStatusPut(requestParameters.id, requestParameters.updateOrderStatusDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderApiApiOrderPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderPost(requestParameters: OrderApiApiOrderPostRequest = {}, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderPost(requestParameters.createOrderDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderApiApiOrderUserUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderUserUserIdGet(requestParameters: OrderApiApiOrderUserUserIdGetRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderUserUserIdGet(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsCategoryCategoryIdGet: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiProductsCategoryCategoryIdGet', 'categoryId', categoryId)
            const localVarPath = `/api/Products/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProductsIdDelete', 'id', id)
            const localVarPath = `/api/Products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProductsIdGet', 'id', id)
            const localVarPath = `/api/Products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} name 
         * @param {number} price 
         * @param {string} [slug] 
         * @param {string} [description] 
         * @param {number} [originalPrice] 
         * @param {number} [stockQuantity] 
         * @param {string} [sKU] 
         * @param {number} [categoryId] 
         * @param {boolean} [isFeatured] 
         * @param {boolean} [isActive] 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsIdPut: async (id: number, name: string, price: number, slug?: string, description?: string, originalPrice?: number, stockQuantity?: number, sKU?: string, categoryId?: number, isFeatured?: boolean, isActive?: boolean, images?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProductsIdPut', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiProductsIdPut', 'name', name)
            // verify required parameter 'price' is not null or undefined
            assertParamExists('apiProductsIdPut', 'price', price)
            const localVarPath = `/api/Products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (price !== undefined) {
                localVarQueryParameter['Price'] = price;
            }

            if (originalPrice !== undefined) {
                localVarQueryParameter['OriginalPrice'] = originalPrice;
            }

            if (stockQuantity !== undefined) {
                localVarQueryParameter['StockQuantity'] = stockQuantity;
            }

            if (sKU !== undefined) {
                localVarQueryParameter['SKU'] = sKU;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (isFeatured !== undefined) {
                localVarQueryParameter['IsFeatured'] = isFeatured;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('Images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} slug 
         * @param {number} price 
         * @param {number} stockQuantity 
         * @param {string} sKU 
         * @param {number} categoryId 
         * @param {string} [description] 
         * @param {number} [originalPrice] 
         * @param {boolean} [isFeatured] 
         * @param {boolean} [isActive] 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsPost: async (name: string, slug: string, price: number, stockQuantity: number, sKU: string, categoryId: number, description?: string, originalPrice?: number, isFeatured?: boolean, isActive?: boolean, images?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiProductsPost', 'name', name)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiProductsPost', 'slug', slug)
            // verify required parameter 'price' is not null or undefined
            assertParamExists('apiProductsPost', 'price', price)
            // verify required parameter 'stockQuantity' is not null or undefined
            assertParamExists('apiProductsPost', 'stockQuantity', stockQuantity)
            // verify required parameter 'sKU' is not null or undefined
            assertParamExists('apiProductsPost', 'sKU', sKU)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiProductsPost', 'categoryId', categoryId)
            const localVarPath = `/api/Products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (price !== undefined) {
                localVarQueryParameter['Price'] = price;
            }

            if (originalPrice !== undefined) {
                localVarQueryParameter['OriginalPrice'] = originalPrice;
            }

            if (stockQuantity !== undefined) {
                localVarQueryParameter['StockQuantity'] = stockQuantity;
            }

            if (sKU !== undefined) {
                localVarQueryParameter['SKU'] = sKU;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (isFeatured !== undefined) {
                localVarQueryParameter['IsFeatured'] = isFeatured;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['IsActive'] = isActive;
            }

            if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('Images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsCategoryCategoryIdGet(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsCategoryCategoryIdGet(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.apiProductsCategoryCategoryIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.apiProductsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.apiProductsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.apiProductsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} name 
         * @param {number} price 
         * @param {string} [slug] 
         * @param {string} [description] 
         * @param {number} [originalPrice] 
         * @param {number} [stockQuantity] 
         * @param {string} [sKU] 
         * @param {number} [categoryId] 
         * @param {boolean} [isFeatured] 
         * @param {boolean} [isActive] 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsIdPut(id: number, name: string, price: number, slug?: string, description?: string, originalPrice?: number, stockQuantity?: number, sKU?: string, categoryId?: number, isFeatured?: boolean, isActive?: boolean, images?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsIdPut(id, name, price, slug, description, originalPrice, stockQuantity, sKU, categoryId, isFeatured, isActive, images, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.apiProductsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {string} slug 
         * @param {number} price 
         * @param {number} stockQuantity 
         * @param {string} sKU 
         * @param {number} categoryId 
         * @param {string} [description] 
         * @param {number} [originalPrice] 
         * @param {boolean} [isFeatured] 
         * @param {boolean} [isActive] 
         * @param {Array<File>} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsPost(name: string, slug: string, price: number, stockQuantity: number, sKU: string, categoryId: number, description?: string, originalPrice?: number, isFeatured?: boolean, isActive?: boolean, images?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsPost(name, slug, price, stockQuantity, sKU, categoryId, description, originalPrice, isFeatured, isActive, images, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.apiProductsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @param {ProductsApiApiProductsCategoryCategoryIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsCategoryCategoryIdGet(requestParameters: ProductsApiApiProductsCategoryCategoryIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Product>> {
            return localVarFp.apiProductsCategoryCategoryIdGet(requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ProductDTO>> {
            return localVarFp.apiProductsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductsApiApiProductsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsIdDelete(requestParameters: ProductsApiApiProductsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProductsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductsApiApiProductsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsIdGet(requestParameters: ProductsApiApiProductsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductDTO> {
            return localVarFp.apiProductsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductsApiApiProductsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsIdPut(requestParameters: ProductsApiApiProductsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProductsIdPut(requestParameters.id, requestParameters.name, requestParameters.price, requestParameters.slug, requestParameters.description, requestParameters.originalPrice, requestParameters.stockQuantity, requestParameters.sKU, requestParameters.categoryId, requestParameters.isFeatured, requestParameters.isActive, requestParameters.images, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductsApiApiProductsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsPost(requestParameters: ProductsApiApiProductsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.apiProductsPost(requestParameters.name, requestParameters.slug, requestParameters.price, requestParameters.stockQuantity, requestParameters.sKU, requestParameters.categoryId, requestParameters.description, requestParameters.originalPrice, requestParameters.isFeatured, requestParameters.isActive, requestParameters.images, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiProductsCategoryCategoryIdGet operation in ProductsApi.
 * @export
 * @interface ProductsApiApiProductsCategoryCategoryIdGetRequest
 */
export interface ProductsApiApiProductsCategoryCategoryIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsCategoryCategoryIdGet
     */
    readonly categoryId: number
}

/**
 * Request parameters for apiProductsIdDelete operation in ProductsApi.
 * @export
 * @interface ProductsApiApiProductsIdDeleteRequest
 */
export interface ProductsApiApiProductsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiProductsIdGet operation in ProductsApi.
 * @export
 * @interface ProductsApiApiProductsIdGetRequest
 */
export interface ProductsApiApiProductsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiProductsIdPut operation in ProductsApi.
 * @export
 * @interface ProductsApiApiProductsIdPutRequest
 */
export interface ProductsApiApiProductsIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly name: string

    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly price: number

    /**
     * 
     * @type {string}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly slug?: string

    /**
     * 
     * @type {string}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly description?: string

    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly originalPrice?: number

    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly stockQuantity?: number

    /**
     * 
     * @type {string}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly sKU?: string

    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly categoryId?: number

    /**
     * 
     * @type {boolean}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly isFeatured?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {Array<File>}
     * @memberof ProductsApiApiProductsIdPut
     */
    readonly images?: Array<File>
}

/**
 * Request parameters for apiProductsPost operation in ProductsApi.
 * @export
 * @interface ProductsApiApiProductsPostRequest
 */
export interface ProductsApiApiProductsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiApiProductsPost
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof ProductsApiApiProductsPost
     */
    readonly slug: string

    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsPost
     */
    readonly price: number

    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsPost
     */
    readonly stockQuantity: number

    /**
     * 
     * @type {string}
     * @memberof ProductsApiApiProductsPost
     */
    readonly sKU: string

    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsPost
     */
    readonly categoryId: number

    /**
     * 
     * @type {string}
     * @memberof ProductsApiApiProductsPost
     */
    readonly description?: string

    /**
     * 
     * @type {number}
     * @memberof ProductsApiApiProductsPost
     */
    readonly originalPrice?: number

    /**
     * 
     * @type {boolean}
     * @memberof ProductsApiApiProductsPost
     */
    readonly isFeatured?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ProductsApiApiProductsPost
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {Array<File>}
     * @memberof ProductsApiApiProductsPost
     */
    readonly images?: Array<File>
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @param {ProductsApiApiProductsCategoryCategoryIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public apiProductsCategoryCategoryIdGet(requestParameters: ProductsApiApiProductsCategoryCategoryIdGetRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).apiProductsCategoryCategoryIdGet(requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public apiProductsGet(options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).apiProductsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsApiApiProductsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public apiProductsIdDelete(requestParameters: ProductsApiApiProductsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).apiProductsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsApiApiProductsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public apiProductsIdGet(requestParameters: ProductsApiApiProductsIdGetRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).apiProductsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsApiApiProductsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public apiProductsIdPut(requestParameters: ProductsApiApiProductsIdPutRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).apiProductsIdPut(requestParameters.id, requestParameters.name, requestParameters.price, requestParameters.slug, requestParameters.description, requestParameters.originalPrice, requestParameters.stockQuantity, requestParameters.sKU, requestParameters.categoryId, requestParameters.isFeatured, requestParameters.isActive, requestParameters.images, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductsApiApiProductsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public apiProductsPost(requestParameters: ProductsApiApiProductsPostRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).apiProductsPost(requestParameters.name, requestParameters.slug, requestParameters.price, requestParameters.stockQuantity, requestParameters.sKU, requestParameters.categoryId, requestParameters.description, requestParameters.originalPrice, requestParameters.isFeatured, requestParameters.isActive, requestParameters.images, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReviewApi - axios parameter creator
 * @export
 */
export const ReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReviewIdDelete', 'id', id)
            const localVarPath = `/api/Review/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReviewIdGet', 'id', id)
            const localVarPath = `/api/Review/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateReviewDTO} [updateReviewDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewIdPut: async (id: number, updateReviewDTO?: UpdateReviewDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiReviewIdPut', 'id', id)
            const localVarPath = `/api/Review/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReviewDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateReviewDTO} [createReviewDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewPost: async (createReviewDTO?: CreateReviewDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReviewDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewProductProductIdGet: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiReviewProductProductIdGet', 'productId', productId)
            const localVarPath = `/api/Review/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewProductProductIdRatingGet: async (productId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('apiReviewProductProductIdRatingGet', 'productId', productId)
            const localVarPath = `/api/Review/product/{productId}/rating`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewApi - functional programming interface
 * @export
 */
export const ReviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateReviewDTO} [updateReviewDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewIdPut(id: number, updateReviewDTO?: UpdateReviewDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewIdPut(id, updateReviewDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateReviewDTO} [createReviewDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewPost(createReviewDTO?: CreateReviewDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewPost(createReviewDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewProductProductIdGet(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewProductProductIdGet(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewProductProductIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiReviewProductProductIdRatingGet(productId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiReviewProductProductIdRatingGet(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.apiReviewProductProductIdRatingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReviewApi - factory interface
 * @export
 */
export const ReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewApiFp(configuration)
    return {
        /**
         * 
         * @param {ReviewApiApiReviewIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewIdDelete(requestParameters: ReviewApiApiReviewIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiReviewIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReviewApiApiReviewIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewIdGet(requestParameters: ReviewApiApiReviewIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReviewDTO> {
            return localVarFp.apiReviewIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReviewApiApiReviewIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewIdPut(requestParameters: ReviewApiApiReviewIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiReviewIdPut(requestParameters.id, requestParameters.updateReviewDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReviewApiApiReviewPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewPost(requestParameters: ReviewApiApiReviewPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Review> {
            return localVarFp.apiReviewPost(requestParameters.createReviewDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReviewApiApiReviewProductProductIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewProductProductIdGet(requestParameters: ReviewApiApiReviewProductProductIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReviewDTO>> {
            return localVarFp.apiReviewProductProductIdGet(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReviewApiApiReviewProductProductIdRatingGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewProductProductIdRatingGet(requestParameters: ReviewApiApiReviewProductProductIdRatingGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.apiReviewProductProductIdRatingGet(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiReviewIdDelete operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewIdDeleteRequest
 */
export interface ReviewApiApiReviewIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewApiApiReviewIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiReviewIdGet operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewIdGetRequest
 */
export interface ReviewApiApiReviewIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewApiApiReviewIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiReviewIdPut operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewIdPutRequest
 */
export interface ReviewApiApiReviewIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewApiApiReviewIdPut
     */
    readonly id: number

    /**
     * 
     * @type {UpdateReviewDTO}
     * @memberof ReviewApiApiReviewIdPut
     */
    readonly updateReviewDTO?: UpdateReviewDTO
}

/**
 * Request parameters for apiReviewPost operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewPostRequest
 */
export interface ReviewApiApiReviewPostRequest {
    /**
     * 
     * @type {CreateReviewDTO}
     * @memberof ReviewApiApiReviewPost
     */
    readonly createReviewDTO?: CreateReviewDTO
}

/**
 * Request parameters for apiReviewProductProductIdGet operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewProductProductIdGetRequest
 */
export interface ReviewApiApiReviewProductProductIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewApiApiReviewProductProductIdGet
     */
    readonly productId: number
}

/**
 * Request parameters for apiReviewProductProductIdRatingGet operation in ReviewApi.
 * @export
 * @interface ReviewApiApiReviewProductProductIdRatingGetRequest
 */
export interface ReviewApiApiReviewProductProductIdRatingGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ReviewApiApiReviewProductProductIdRatingGet
     */
    readonly productId: number
}

/**
 * ReviewApi - object-oriented interface
 * @export
 * @class ReviewApi
 * @extends {BaseAPI}
 */
export class ReviewApi extends BaseAPI {
    /**
     * 
     * @param {ReviewApiApiReviewIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewIdDelete(requestParameters: ReviewApiApiReviewIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReviewApiApiReviewIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewIdGet(requestParameters: ReviewApiApiReviewIdGetRequest, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReviewApiApiReviewIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewIdPut(requestParameters: ReviewApiApiReviewIdPutRequest, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewIdPut(requestParameters.id, requestParameters.updateReviewDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReviewApiApiReviewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewPost(requestParameters: ReviewApiApiReviewPostRequest = {}, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewPost(requestParameters.createReviewDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReviewApiApiReviewProductProductIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewProductProductIdGet(requestParameters: ReviewApiApiReviewProductProductIdGetRequest, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewProductProductIdGet(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReviewApiApiReviewProductProductIdRatingGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewProductProductIdRatingGet(requestParameters: ReviewApiApiReviewProductProductIdRatingGetRequest, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).apiReviewProductProductIdRatingGet(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }
}



